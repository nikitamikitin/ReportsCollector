1.How you can insure data consistency in case of server failures etc.?

The backup site service (without modifying their website or service) is very important to customers.
1. Have a copy of all the data in another data center.
2. In case of failure, switch the work to backup DC.


Regular database backup is an important step in data protection. 
In general, there are two broad categories of backups: backups at the file system level (“physical copies”) and logical backups. 
Physical backup (at the file system level) involves creating snapshots of the main data files at a certain point in time, which allows you to recover data using the state recorded in snapshots.


2.In case this server handles huge amount of events, how would you implement a feature that will need to preform complex aggregations?



A command like getLastError, the essence of it is to wait until all operations are saved to the database and return an error code or a successful completion.
The specification tries hard to convince that the method is outdated and should not be used, it is marked depricated in the Monga driver.
https://docs.mongodb.com/manual/reference/command/getLastError/

3.What you want to do is called Connection pooling. 
The solution for the mentioned problem would be to use the semaphoreing system that a database allows, specifically transactions.
First, you read the table and find the first record that is unused. You propagate the number back to your application. Then you try to open the record exclusively (for writing). 
You check again if the record is still unused, and if it is, fetch the data for the record. 
Save the data to the record and release it. 
If, however, the record is suddenly used when you open it for writing, you need to fall back and look for a new record again and repeat the mechanism.
